{
  "swaggerVersion": "1.2",
  "basePath": "http://api.smartcanvas.com/card/v1",
  "resourcePath": "/cards",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/cards",
      "operations": [
        {
          "method": "POST",
          "summary": "Create a Card",
          "notes": "Creates a new card inside Smart Canvas.<br/><br/>This operation requires the scopes: 'smartcanvas.cards.write', 'smartcanvas.cards.moderate'. If 'isAutoModerated' attribute is defined as 'true', you must have 'smartcanvas.cards.moderate' privilege.",
          "type": "PostResponse",
          "nickname": "saveCard",
          "parameters": [
            {
              "name": "x-client-id",
              "paramType": "header",
              "description": "Client ID required to make this API call",
              "required": true,
              "type": "string"
            },
            {
              "name": "x-access-token",
              "paramType": "header",
              "description": "Access token. The person must have publisher or admin privileges.",
              "required": true,
              "type": "string"
            },
            {
              "name": "x-suppress-response-codes",
              "paramType": "header",
              "description": "If 'true', the HTTP response is always 200. Default = 'false'",
              "required": true,
              "type": "boolean",
              "defaultValue": "false"
            },
            {
              "name": "card",
              "description": "The card to be created",
              "required": true,
              "type": "Card",
              "paramType": "body"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "See <a href='http://dev.smartcanvas.com/api-portal/content/response-messages' target='_blank'>Response Codes</a> for all response and error codes"
            }
          ]
        },
        {
          "method": "GET",
          "summary": "List Cards",
          "notes": "Returns a list of cards that matches a specific search criteria. All cards returned may also contain information such as attachments, user activities (like, dislike, etc) and comments. This operation requires the scope 'smartcanvas.cards.read'",
          "type": "GetResponse",
          "nickname": "listCards",
          "parameters": [
            {
              "name": "x-client-id",
              "paramType": "header",
              "description": "Client ID required to make this API call",
              "required": true,
              "type": "string"
            },
            {
              "name": "x-access-token",
              "paramType": "header",
              "description": "Access token. If not informed, only public cards will be returned.",
              "required": false,
              "type": "string"
            },
            {
              "name": "x-suppress-response-codes",
              "paramType": "header",
              "description": "If 'true', the HTTP response is always 200. Default = 'false'",
              "required": true,
              "type": "boolean",
              "defaultValue": "false"
            },
            {
              "name": "q",
              "paramType": "query",
              "description": "Search term that will be used to filter content. Smart Canvas will look into title, category, content and other indexable fields to match the search criteria. Example = google cloud",
              "required": true,
              "type": "string"
            },
            {
              "name": "status",
              "paramType": "query",
              "description": "Possible values:<br/><li>all (all status)</li><li>approved (Card has already been approved by the moderator)</li><li>pending (Card is waiting for moderation), expired (Card is expired)</li><li>rejected (Cards rejected by moderators)</li>",
              "required": true,
              "type": "string",
              "enum": [
                "all",
                "approved",
                "pending",
                "expired",
                "rejected"
              ],
              "defaultValue": "all"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "See <a href='http://dev.smartcanvas.com/api-portal/content/response-messages' target='_blank'>Response Codes</a> for all response and error codes"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "Card": {
      "id": "Card",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique identifier for a card in Smart Canvas"
        },
        "mnemonic": {
          "type": "string",
          "description": "Card mnemonic. The mnemonic is used to compose the URL of the card."
        },
        "title": {
          "type": "string",
          "description": "Title of the card"
        },
        "summary": {
          "type": "string",
          "description": "Summary of the card"
        },
        "content": {
          "type": "string",
          "description": "Content of the card"
        },
        "community": {
          "$ref": "Community",
          "description": "The community that this card belongs to"
        },
        "createDate": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of this card creation"
        },
        "updateDate": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of this card creation"
        },
        "publishDate": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of this card publishing"
        },
        "expirationDate": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of this card expiration"
        },
        "isAutoModerated": {
          "type": "boolean",
          "description": "Indicates if this card is auto-moderated or not"
        },
        "jsonExtendedData": {
          "type": "string",
          "description": "JSON data with extra information saved with this card"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Categories (tags) associated to this card"
        },
        "meta-tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Meta-tags associated to this card. Meta-tags are intented to be used by system / API only, not visible for end-users.\n"
        },
        "author": {
          "$ref": "Author",
          "description": "Author of this card"
        },
        "contentProvider": {
          "$ref": "ContentProvider",
          "description": "Information about the original source of this card"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "Attachment"
          },
          "description": "Attachments contained in this card"
        },
        "userActivities": {
          "$ref": "UserActivity",
          "readOnly": true,
          "description": "Information about user activities such as like, share etc"
        },
        "permission": {
          "$ref": "Permission",
          "description": "Security model data, includes security level and user / group permissions"
        },
        "locale": {
          "$ref": "Locale",
          "description": "Locale and i18n information"
        }
      }
    },
    "Author": {
      "id": "Author",
      "properties": {
        "id": {
          "type": "string",
          "description": "Author identification in Smart Canvas. That's a Person ID or email. If not provided, this author\ndoesn't exist in Smart Canvas (but it's still valid).\n"
        },
        "displayName": {
          "type": "string",
          "description": "Author display name"
        },
        "imageURL": {
          "type": "string",
          "description": "Author image URL"
        }
      }
    },
    "Community": {
      "id": "Community",
      "properties": {
        "id": {
          "type": "string",
          "description": "Community ID or mnemonic"
        },
        "displayName": {
          "type": "string",
          "description": "User-friendly community display name"
        }
      }
    },
    "ContentProvider": {
      "id": "ContentProvider",
      "properties": {
        "providerId": {
          "type": "string",
          "description": "Identifies the provider (ID or mnemonic), the original source of this content. Example = googleplus"
        },
        "providerContentId": {
          "type": "string",
          "description": "Identifies this content on its original source"
        },
        "providerContentURL": {
          "type": "string",
          "description": "Original URL of this content on its provider"
        },
        "providerUserId": {
          "type": "string",
          "description": "The identifier of the author on the provider"
        }
      }
    },
    "Attachment": {
      "id": "Attachment",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of this attachment (*TODO review possible values)",
          "default": "photo",
          "enum": [
            "photo",
            "article",
            "video",
            "drive"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Display name of this attachment"
        },
        "contentURL": {
          "type": "string",
          "description": "Content URL for this attachment"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "Image"
          },
          "description": "Images contained in this attachment"
        },
        "embedURL": {
          "type": "string",
          "format": "Embed URL for this attachment (* TODO - o que eh isso?)"
        },
        "jsonExtendedData": {
          "type": "string",
          "description": "JSON data with extra information saved with this attachment"
        }
      }
    },
    "Image": {
      "id": "Image",
      "properties": {
        "url": {
          "type": "string",
          "description": "Image URL"
        },
        "type": {
          "type": "string",
          "description": "Type of this image"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Image height"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Image width"
        },
        "originalUrl": {
          "type": "string",
          "description": "Original image URL on the content provider"
        }
      }
    },
    "Activity": {
      "id": "Activity",
      "properties": {
        "type": {
          "type": "string",
          "description": "type of this user activity (example = like, dislike etc)"
        },
        "counter": {
          "type": "integer",
          "format": "int32",
          "description": "how many of this activities this card has"
        },
        "target": {
          "type": "string",
          "description": "optional value that represents the target of this action. Examples = facebook, twitter, linkedin (for sharing)"
        }
      }
    },
    "UserActivity": {
      "id": "UserActivity",
      "properties": {
        "type": {
          "type": "string",
          "description": "type of this user activity (example = like, dislike etc)"
        },
        "target": {
          "type": "string",
          "description": "optional value that represents the target of this action. Examples = facebook, twitter, linkedin (for sharing)"
        }
      }
    },
    "Comment": {
      "id": "Comment",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Comment ID"
        },
        "personId": {
          "type": "integer",
          "format": "int64",
          "description": "Person ID (*TODO se email vai virar chave, esse campo não faz mais sentido)"
        },
        "personEmail": {
          "type": "string",
          "description": "Person email"
        },
        "text": {
          "type": "string",
          "description": "Comment text (content)"
        },
        "createDate": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of this comment creation"
        }
      }
    },
    "Permission": {
      "id": "Permission",
      "properties": {
        "securityLevel": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 99999999,
          "default": 0
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Locale": {
      "id": "Locale",
      "properties": {
        "languages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "region": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "geoCode": {
          "type": "string",
          "description": "Geo code from where this card was created (*TODO talvez move-lo para a raiz, e mudar de nome)"
        },
        "address": {
          "type": "string",
          "description": "Address from where this card was created"
        },
        "placeName": {
          "type": "string",
          "description": "Name of the place from where this card was created"
        }
      }
    },
    "PostResponse": {
      "id": "PostResponse",
      "properties": {
        "cardId": {
          "type": "string",
          "description": "The id of the card"
        },
        "cardMnemonic": {
          "type": "string",
          "description": "The mnemonic of the card"
        }
      }
    },
    "GetResponse": {
      "id": "GetResponse",
      "properties": {
        "meta": {
          "type": "MetaResponse",
          "description": "Meta information about the GET request"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "Card"
          },
          "description": "The returned array of cards"
        }
      }
    },
    "MetaResponse": {
      "id": "MetaResponse",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "How many cards were found with this query"
        },
        "pos": {
          "type": "integer",
          "format": "int32",
          "description": "The position of the last element of this list in the general listing"
        },
        "facets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Suggestions to refine your search"
        }
      }
    }
  }
}